import kotlin.random.Random
import kotlin.system.exitProcess
import java.util.concurrent.ThreadLocalRandom
import java.io.FileInputStream
import java.io.IOException

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ (CSV —Ñ–æ—Ä–º–∞—Ç)
fun loadDataFromFile(filePath: String): Pair<Map<String, Map<String, Int>>, Map<String, AnimalCharacteristics>> {
    val eatProbabilities = mutableMapOf<String, MutableMap<String, Int>>()
    val animalCharacteristics = mutableMapOf<String, AnimalCharacteristics>()

    try {
        val file = FileInputStream(filePath).bufferedReader()
        val lines = file.readLines()

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–∞–Ω–Ω—ã–µ)
        if (lines.size < 2) {
            println("–§–∞–π–ª CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–∞–Ω–Ω—ã–µ).")
            file.close()
            return Pair(eatProbabilities.toMap(), animalCharacteristics.toMap())
        }

        val header = lines[0].split(",").map { it.trim().replace("\"", "") }
        val animalNames = header.subList(1, header.size).toMutableList()

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ–µ–¥–∞–Ω–∏—è
        for (i in 1 until lines.size) {
            val parts = lines[i].split(",").map { it.trim().replace("\"", "") }
            if (parts.size != header.size) {
                println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}. –û–∂–∏–¥–∞–ª–æ—Å—å ${header.size}, –ø–æ–ª—É—á–µ–Ω–æ ${parts.size}.")
                continue
            }

            val eater = parts[0]

            if (animalNames.contains(eater)) {
                val preyProbabilities = mutableMapOf<String, Int>()
                for (j in 1 until parts.size) {
                    val prey = header[j]
                    val probability = parts[j].toIntOrNull() ?: 0
                    preyProbabilities[prey] = probability
                }
                eatProbabilities[eater] = preyProbabilities
            }
            else{
                println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –≤ —Å—Ç—Ä–æ–∫–µ ${i+1}: $eater")
            }
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö (–º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ —Ñ–∞–π–ª–∞)
        val animalChar = AnimalCharacteristics(50.0, 20, 3.0, 10.0)
        val animals = listOf("–í–æ–ª–∫", "–£–¥–∞–≤", "–õ–∏—Å–∞", "–ú–µ–¥–≤–µ–¥—å", "–û—Ä–µ–ª", "–õ–æ—à–∞–¥—å", "–û–ª–µ–Ω—å", "–ö—Ä–æ–ª–∏–∫", "–ú—ã—à—å", "–ö–æ–∑–∞", "–û–≤—Ü–∞", "–ö–∞–±–∞–Ω", "–ë—É–π–≤–æ–ª", "–£—Ç–∫–∞", "–ì—É—Å–µ–Ω–∏—Ü–∞")

        for (animal in animals) {
            animalCharacteristics[animal] = animalChar
        }

        file.close()

    } catch (e: IOException) {
        println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${e.message}")
    }

    return Pair(eatProbabilities.toMap(), animalCharacteristics.toMap())
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
data class AnimalCharacteristics(
    val weight: Double,
    val maxCount: Int,
    val speed: Double,
    val foodNeeded: Double
)

// –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏
data class SimulationConfig(
    val islandWidth: Int,
    val islandHeight: Int,
    val initialAnimals: Map<String, Int>,
    val plantGrowthProbability: Int,
    val simulationSpeed: Long,
    val stopCondition: () -> Boolean,
    val animalDataFile: String
)

// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å Animal
abstract class Animal(
    val name: String,
    var x: Int,
    var y: Int,
    val symbol: String,
    val characteristics: AnimalCharacteristics
) {
    abstract fun move(island: Island)
    abstract fun reproduce(): Animal?
    abstract fun die(): Boolean
    abstract fun eat(location: Location, eatProbabilities: Map<String, Map<String, Int>>)

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Å—Ç—Ä–æ–≤–∞
    fun isWithinBounds(island: Array<Array<Location>>): Boolean {
        return x in island.indices && y in island[0].indices
    }
}

// –ò–µ—Ä–∞—Ä—Ö–∏—è —Ö–∏—â–Ω–∏–∫–æ–≤
sealed class Predator(name: String, x: Int, y: Int, symbol: String, characteristics: AnimalCharacteristics) :
    Animal(name, x, y, symbol, characteristics) {
    class Wolf(x: Int, y: Int, characteristics: AnimalCharacteristics) :
        Predator("–í–æ–ª–∫", x, y, "üê∫", characteristics)

    class Boa(x: Int, y: Int, characteristics: AnimalCharacteristics) :
        Predator("–£–¥–∞–≤", x, y, "üêç", characteristics)

    class Fox(x: Int, y: Int, symbol: String, characteristics: AnimalCharacteristics) :
        Predator("–õ–∏—Å–∞", x, y, symbol, characteristics)

    class Bear(x: Int, y: Int, characteristics: AnimalCharacteristics) :
        Predator("–ú–µ–¥–≤–µ–¥—å", x, y, "üêª", characteristics)

    class Eagle(x: Int, y: Int, characteristics: AnimalCharacteristics) :
        Predator("–û—Ä–µ–ª", x, y, "ü¶Ö", characteristics)

    override fun move(island: Island) {
        // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        val directions = listOf(-1 to 0, 1 to 0, 0 to -1, 0 to 1)
        val (dx, dy) = directions.random()
        val speed = characteristics.speed.toInt()

        for (i in 1..speed) { // –£—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è
            val newX = x + dx
            val newY = y + dy

            if (newX in island.grid.indices && newY in island.grid[0].indices) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ—Å—Ç—Ä–æ–≤–∞
                x = newX
                y = newY
            } else {
                //–ï—Å–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤—ã—à–ª–æ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã, –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ –º–µ—Å—Ç–µ.
                break
            }
        }
    }

    override fun reproduce(): Animal? {
        // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∏–¥–∞
        val reproduceProbability = when (this) {
            is Wolf -> 30
            is Boa -> 20
            is Fox -> 40
            is Bear -> 10
            is Eagle -> 25
        }

        return if (ThreadLocalRandom.current().nextInt(100) < reproduceProbability) {
            when (this) {
                is Wolf -> Wolf(x, y, this.characteristics)
                is Boa -> Boa(x, y, this.characteristics)
                is Fox -> Fox(x, y, this.symbol, this.characteristics)
                is Bear -> Bear(x, y, this.characteristics)
                is Eagle -> Eagle(x, y, this.characteristics)
            }
        } else {
            null
        }
    }

    override fun die(): Boolean {
        // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–º–µ—Ä—Ç–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∏–¥–∞
        val dieProbability = when (this) {
            is Wolf -> 15
            is Boa -> 10
            is Fox -> 20
            is Bear -> 5
            is Eagle -> 12
        }
        return ThreadLocalRandom.current().nextInt(100) < dieProbability
    }

    override fun eat(location: Location, eatProbabilities: Map<String, Map<String, Int>>) {
        val prey = location.animals.filter { it !== this }.toMutableList() // –°–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–±—ã—á–∏
        if (prey.isNotEmpty()) {
            val eatProbabilityMap = eatProbabilities[this.name] ?: return // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–µ–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ö–∏—â–Ω–∏–∫–∞
            val animalsToRemove = mutableListOf<Animal>()
            for (victim in prey) {
                val eatProbability = eatProbabilityMap[victim.name] ?: 0 // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å—ä–µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∂–µ—Ä—Ç–≤—É
                if (ThreadLocalRandom.current().nextInt(100) < eatProbability) {
                    animalsToRemove.add(victim)
                    // println("${this.name} —Å—ä–µ–ª ${victim.name}")
                    break // –°—ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∂–µ—Ä—Ç–≤—É –∑–∞ —Ä–∞–∑
                }
            }
            location.animals.removeAll(animalsToRemove)
        }
    }
}

// –ò–µ—Ä–∞—Ä—Ö–∏—è —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö
sealed class Herbivore(name: String, x: Int, y: Int, symbol: String, characteristics: AnimalCharacteristics) :
    Animal(name, x, y, symbol, characteristics) {
    class Horse(x: Int, y: Int, characteristics: AnimalCharacteristics) :
        Herbivore("–õ–æ—à–∞–¥—å", x, y, "üêé", characteristics)

    class Deer(x: Int, y: Int, characteristics: AnimalCharacteristics) :
        Herbivore("–û–ª–µ–Ω—å", x, y, "ü¶å", characteristics)

    class Rabbit(x: Int, y: Int, characteristics: AnimalCharacteristics) :
        Herbivore("–ö—Ä–æ–ª–∏–∫", x, y, "üêá", characteristics)

    class Mouse(x: Int, y: Int, characteristics: AnimalCharacteristics) :
        Herbivore("–ú—ã—à—å", x, y, "üêÅ", characteristics)

    class Goat(x: Int, y: Int, characteristics: AnimalCharacteristics) :
        Herbivore("–ö–æ–∑–∞", x, y, "üêê", characteristics)

    class Sheep(x: Int, y: Int, characteristics: AnimalCharacteristics) :
        Herbivore("–û–≤—Ü–∞", x, y, "üêë", characteristics)

    class Boar(x: Int, y: Int, characteristics: AnimalCharacteristics) :
        Herbivore("–ö–∞–±–∞–Ω", x, y, "üêó", characteristics)

    class Buffalo(x: Int, y: Int, characteristics: AnimalCharacteristics) :
        Herbivore("–ë—É–π–≤–æ–ª", x, y, "üêÉ", characteristics)

    class Duck(x: Int, y: Int, characteristics: AnimalCharacteristics) :
        Herbivore("–£—Ç–∫–∞", x, y, "ü¶Ü", characteristics)

    class Caterpillar(x: Int, y: Int, characteristics: AnimalCharacteristics) :
        Herbivore("–ì—É—Å–µ–Ω–∏—Ü–∞", x, y, "üêõ", characteristics)

    override fun move(island: Island) {
        // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        val directions = listOf(-1 to 0, 1 to 0, 0 to -1, 0 to 1)
        val (dx, dy) = directions.random()
        val speed = characteristics.speed.toInt()

        for (i in 1..speed) { // –£—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è
            val newX = x + dx
            val newY = y + dy

            if (newX in island.grid.indices && newY in island.grid[0].indices) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ—Å—Ç—Ä–æ–≤–∞
                x = newX
                y = newY
            } else {
                //–ï—Å–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤—ã—à–ª–æ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã, –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ –º–µ—Å—Ç–µ.
                break
            }
        }
    }

    override fun reproduce(): Animal? {
        // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∏–¥–∞
        val reproduceProbability = when (this) {
            is Horse -> 20
            is Deer -> 25
            is Rabbit -> 60
            is Mouse -> 70
            is Goat -> 30
            is Sheep -> 25
            is Boar -> 40
            is Buffalo -> 15
            is Duck -> 50
            is Caterpillar -> 80
        }
        return if (ThreadLocalRandom.current().nextInt(100) < reproduceProbability) {
            when (this) {
                is Horse -> Horse(x, y, this.characteristics)
                is Deer -> Deer(x, y, this.characteristics)
                is Rabbit -> Rabbit(x, y, this.characteristics)
                is Mouse -> Mouse(x, y, this.characteristics)
                is Goat -> Goat(x, y, this.characteristics)
                is Sheep -> Sheep(x, y, this.characteristics)
                is Boar -> Boar(x, y, this.characteristics)
                is Buffalo -> Buffalo(x, y, this.characteristics)
                is Duck -> Duck(x, y, this.characteristics)
                is Caterpillar -> Caterpillar(x, y, this.characteristics)
            }
        } else {
            null
        }
    }

    override fun die(): Boolean {
        // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–º–µ—Ä—Ç–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∏–¥–∞
        val dieProbability = when (this) {
            is Horse -> 5
            is Deer -> 7
            is Rabbit -> 10
            is Mouse -> 15
            is Goat -> 8
            is Sheep -> 7
            is Boar -> 10
            is Buffalo -> 3
            is Duck -> 12
            is Caterpillar -> 20
        }
        return ThreadLocalRandom.current().nextInt(100) < dieProbability
    }

    override fun eat(location: Location, eatProbabilities: Map<String, Map<String, Int>>) {
        if (this is Duck) {
            // –£—Ç–∫–∞ –µ—Å—Ç –≥—É—Å–µ–Ω–∏—Ü
            if (location.animals.any { it is Caterpillar }) {
                val eatProbabilityMap = eatProbabilities[this.name] ?: return
                val caterpillar = location.animals.find { it is Caterpillar }
                if (caterpillar != null) {
                    val eatProbability = eatProbabilityMap[caterpillar.name] ?: 0
                    if (ThreadLocalRandom.current().nextInt(100) < eatProbability) {
                        location.animals.remove(caterpillar)
                    }
                }
            } else { // –î—Ä—É–≥–∏–µ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–µ –µ–¥—è—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è
                if (location.plants.isNotEmpty()) {
                    location.plants.removeAt(0) // –ï–¥–∏–º –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ
                }
            }
        } else { // –î—Ä—É–≥–∏–µ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–µ –µ–¥—è—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è
            if (location.plants.isNotEmpty()) {
                location.plants.removeAt(0) // –ï–¥–∏–º –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ
            }
        }
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏–π
class Plant(val x: Int, val y: Int, val symbol: String)

// –ö–ª–∞—Å—Å –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ (–∫–ª–µ—Ç–∫–∏ –æ—Å—Ç—Ä–æ–≤–∞)
class Location {
    val plants = mutableListOf<Plant>()
    val animals = mutableListOf<Animal>()
}

// –ö–ª–∞—Å—Å –¥–ª—è –æ—Å—Ç—Ä–æ–≤–∞
class Island(val width: Int, val height: Int) {
    val grid = Array(width) { Array(height) { Location() } }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç—Ä–æ–≤–∞
    fun initialize(config: SimulationConfig, animalCharacteristics: Map<String, AnimalCharacteristics>) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö
        config.initialAnimals.forEach { (animalName, count) ->
            repeat(count) {
                val x = ThreadLocalRandom.current().nextInt(width)
                val y = ThreadLocalRandom.current().nextInt(height)
                val characteristics = animalCharacteristics[animalName] ?: error("–ù–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ $animalName")
                val animal = when (animalName) {
                    "–í–æ–ª–∫" -> Predator.Wolf(x, y, characteristics)
                    "–£–¥–∞–≤" -> Predator.Boa(x, y, characteristics)
                    "–õ–∏—Å–∞" -> {
                        val foxSymbol = "ü¶ä"
                        Predator.Fox(x, y, foxSymbol, characteristics)
                    }
                    "–ú–µ–¥–≤–µ–¥—å" -> Predator.Bear(x, y, characteristics)
                    "–û—Ä–µ–ª" -> Predator.Eagle(x, y, characteristics)
                    "–õ–æ—à–∞–¥—å" -> Herbivore.Horse(x, y, characteristics)
                    "–û–ª–µ–Ω—å" -> Herbivore.Deer(x, y, characteristics)
                    "–ö—Ä–æ–ª–∏–∫" -> Herbivore.Rabbit(x, y, characteristics)
                    "–ú—ã—à—å" -> Herbivore.Mouse(x, y, characteristics)
                    "–ö–æ–∑–∞" -> Herbivore.Goat(x, y, characteristics)
                    "–û–≤—Ü–∞" -> Herbivore.Sheep(x, y, characteristics)
                    "–ö–∞–±–∞–Ω" -> Herbivore.Boar(x, y, characteristics)
                    "–ë—É–π–≤–æ–ª" -> Herbivore.Buffalo(x, y, characteristics)
                    "–£—Ç–∫–∞" -> Herbivore.Duck(x, y, characteristics)
                    "–ì—É—Å–µ–Ω–∏—Ü–∞" -> Herbivore.Caterpillar(x, y, characteristics)
                    else -> error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ: $animalName")
                }
                addAnimal(animal)
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç–µ–Ω–∏—è
        for (i in 0 until width) {
            for (j in 0 until height) {
                if (ThreadLocalRandom.current().nextInt(100) < config.plantGrowthProbability) {
                    grid[i][j].plants.add(Plant(i, j, "üåø"))
                }
            }
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ –Ω–∞ –æ—Å—Ç—Ä–æ–≤
    fun addAnimal(animal: Animal) {
        if (animal.isWithinBounds(grid)) {
            grid[animal.x][animal.y].animals.add(animal)
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç—Ä–æ–≤–∞
    fun update(eatProbabilities: Map<String, Map<String, Int>>) {
        val newAnimals = mutableListOf<Animal>()

        for (i in 0 until width) {
            for (j in 0 until height) {
                val location = grid[i][j]
                val animalsToRemove = mutableListOf<Animal>()

                //–ï–¥–∏–º
                for (animal in location.animals) {
                    animal.eat(location, eatProbabilities)
                }

                //–î–≤–∏–≥–∞–µ–º—Å—è
                for (animal in location.animals) {
                    animal.move(this)
                }

                //–†–∞–∑–º–Ω–æ–∂–∞–µ–º—Å—è –∏ —É–º–∏—Ä–∞–µ–º
                for (animal in location.animals) {
                    if (!animal.isWithinBounds(grid)) {
                        animalsToRemove.add(animal)
                    } else {
                        val offspring = animal.reproduce()
                        if (offspring != null) {
                            newAnimals.add(offspring)
                        }
                        if (animal.die()) {
                            animalsToRemove.add(animal)
                        }
                    }
                }

                location.animals.removeAll(animalsToRemove)
            }
        }

        newAnimals.forEach { addAnimal(it) }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç—Ä–æ–≤–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    fun getGridState(): Array<Array<String>> {
        return Array(width) { i ->
            Array(height) { j ->
                when {
                    grid[i][j].animals.any { it is Predator } -> grid[i][j].animals.first { it is Predator }.symbol // –•–∏—â–Ω–∏–∫
                    grid[i][j].animals.any { it is Herbivore } -> grid[i][j].animals.first { it is Herbivore }.symbol // –¢—Ä–∞–≤–æ—è–¥–Ω–æ–µ
                    grid[i][j].plants.isNotEmpty() -> "üåø" // –†–∞—Å—Ç–µ–Ω–∏–µ
                    else -> "‚¨ú" // –ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
                }
            }
        }
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Å—Ç—Ä–æ–≤—É
    fun getStatistics(): String {
        var herbivoresCount = 0
        var predatorsCount = 0
        var plantsCount = 0

        for (i in 0 until width) {
            for (j in 0 until height) {
                herbivoresCount += grid[i][j].animals.count { it is Herbivore }
                predatorsCount += grid[i][j].animals.count { it is Predator }
                plantsCount += grid[i][j].plants.size
            }
        }

        return "–¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ: $herbivoresCount, –•–∏—â–Ω–∏–∫–∏: $predatorsCount, –†–∞—Å—Ç–µ–Ω–∏—è: $plantsCount"
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç—Ä–æ–≤–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
fun printIsland(grid: Array<Array<String>>) {
    for (i in grid.indices) {
        for (j in grid[i].indices) {
            print(grid[i][j])
        }
        println()
    }
    println()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏
fun readSimulationConfig(): SimulationConfig {
    println("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏:")
    print("–®–∏—Ä–∏–Ω–∞ –æ—Å—Ç—Ä–æ–≤–∞: ")
    val width = readLine()?.toIntOrNull() ?: 20
    print("–í—ã—Å–æ—Ç–∞ –æ—Å—Ç—Ä–æ–≤–∞: ")
    val height = readLine()?.toIntOrNull() ?: 20

    // –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞
    val initialAnimals = mutableMapOf<String, Int>()
    println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ (–∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å):")
    val animals = listOf("–í–æ–ª–∫", "–£–¥–∞–≤", "–õ–∏—Å–∞", "–ú–µ–¥–≤–µ–¥—å", "–û—Ä–µ–ª", "–õ–æ—à–∞–¥—å", "–û–ª–µ–Ω—å", "–ö—Ä–æ–ª–∏–∫", "–ú—ã—à—å", "–ö–æ–∑–∞", "–û–≤—Ü–∞", "–ö–∞–±–∞–Ω", "–ë—É–π–≤–æ–ª", "–£—Ç–∫–∞", "–ì—É—Å–µ–Ω–∏—Ü–∞")
    for (animal in animals) {
        print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ $animal: ")
        val count = readLine()?.toIntOrNull() ?: 0
        initialAnimals[animal] = count
    }

    print("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π (%): ")
    val plantGrowth = readLine()?.toIntOrNull() ?: 20
    print("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–∫—Ç–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ (—Å–µ–∫—É–Ω–¥): ")
    val speed = readLine()?.toLongOrNull() ?: 7
    print("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ (CSV): ")
    val animalDataFile = readLine() ?: "C:\\Users\\NATA\\Downloads\\–¢–∞–±–ª–∏—Ü—ã-–∫-–û—Å—Ç—Ä–æ–≤—É.csv"

    return SimulationConfig(
        islandWidth = width,
        islandHeight = height,
        initialAnimals = initialAnimals.toMap(),
        plantGrowthProbability = plantGrowth,
        simulationSpeed = speed * 1000, // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–µ–∫—É–Ω–¥ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        stopCondition = {
            false // –£—Å–ª–æ–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
        },
        animalDataFile = animalDataFile
    )
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
fun main() {
    val config = readSimulationConfig()
    val (eatProbabilities, animalCharacteristics) = loadDataFromFile(config.animalDataFile)

    val island = Island(config.islandWidth, config.islandHeight)
    island.initialize(config, animalCharacteristics)

    // –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
    while (true) {
        island.update(eatProbabilities)
        printIsland(island.getGridState())
        println(island.getStatistics()) // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        Thread.sleep(config.simulationSpeed)

        // –£—Å–ª–æ–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—Å–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –≤—ã–º–µ—Ä–ª–∏)
        if (island.grid.all { row -> row.all { it.animals.isEmpty() } }) {
            println("–í—Å–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –≤—ã–º–µ—Ä–ª–∏. –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            exitProcess(0)
        }
    }
}
